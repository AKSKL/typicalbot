plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id 'com.github.hierynomus.license' version '0.14.0'
}

// Semantic Versioning 2.0.0
def versionObject = new Version(major: 3, minor: '0', patch: 0)
version = versionObject.toString() + '-alpha'

mainClassName = 'com.typicalbot.TypicalBot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // JDA
    compile group: 'net.dv8tion', name: 'JDA', version: '3.8.1_457'
    compile group: 'com.sedmelluq', name: 'jda-nas', version: '1.0.6'
    compile group: 'com.sedmelluq', name: 'lavaplayer', version: '1.3.10'

    // Logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    // Sentry
    compile group: 'io.sentry', name: 'sentry', version: '1.7.17'

    // Guava
    compile group: 'com.google.guava', name: 'guava', version: '27.0.1-jre'

    // Unit Tests
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

// https://stackoverflow.com/questions/30627918/how-is-a-token-replaced-in-a-file-for-a-gradle-build-product?rq=1
import org.apache.tools.ant.filters.ReplaceTokens

task prepareSources(type: Copy) {
    from('src/main/java') {
        include '**/TypicalBot.java'
    }
    into 'build/prepareSrc'
    filter(ReplaceTokens, tokens: [version: project.version])
}

compileJava {
    def javaSrc = sourceSets.main.allJava.filter {
        it.name != 'TypicalBot.java'
    }

    source = javaSrc + prepareSources.destinationDir
    classpath = sourceSets.main.compileClasspath

    dependsOn prepareSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

license {
    header = file('LICENSEHEADER.txt')
    exclude('**/Zalgo4J*.java')
    excludes (['**/*.yml', '**/*.properties', '**/*.json'])
}

artifacts {
    archives shadowJar
}

jar {
    classifier = "nodeps"
}

shadowJar {
    classifier = ""
}

build.dependsOn shadowJar

class Version {
    String major, minor, patch

    String toString() {
        return "${major}.${minor}.${patch}"
    }
}
